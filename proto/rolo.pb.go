// Code generated by protoc-gen-go.
// source: rolo.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	rolo.proto

It has these top-level messages:
	Attributes
	AuthorizeResp
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type Attributes struct {
	User      string `protobuf:"bytes,1,opt" json:"User,omitempty"`
	Group     string `protobuf:"bytes,2,opt" json:"Group,omitempty"`
	ReadOnly  bool   `protobuf:"varint,3,opt" json:"ReadOnly,omitempty"`
	Resource  string `protobuf:"bytes,4,opt" json:"Resource,omitempty"`
	Namespace string `protobuf:"bytes,5,opt" json:"Namespace,omitempty"`
}

func (m *Attributes) Reset()         { *m = Attributes{} }
func (m *Attributes) String() string { return proto1.CompactTextString(m) }
func (*Attributes) ProtoMessage()    {}

type AuthorizeResp struct {
	Authorized bool `protobuf:"varint,1,opt" json:"Authorized,omitempty"`
}

func (m *AuthorizeResp) Reset()         { *m = AuthorizeResp{} }
func (m *AuthorizeResp) String() string { return proto1.CompactTextString(m) }
func (*AuthorizeResp) ProtoMessage()    {}

func init() {
}

// Client API for Rolo service

type RoloClient interface {
	Authorize(ctx context.Context, in *Attributes, opts ...grpc.CallOption) (*AuthorizeResp, error)
}

type roloClient struct {
	cc *grpc.ClientConn
}

func NewRoloClient(cc *grpc.ClientConn) RoloClient {
	return &roloClient{cc}
}

func (c *roloClient) Authorize(ctx context.Context, in *Attributes, opts ...grpc.CallOption) (*AuthorizeResp, error) {
	out := new(AuthorizeResp)
	err := grpc.Invoke(ctx, "/proto.Rolo/Authorize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rolo service

type RoloServer interface {
	Authorize(context.Context, *Attributes) (*AuthorizeResp, error)
}

func RegisterRoloServer(s *grpc.Server, srv RoloServer) {
	s.RegisterService(&_Rolo_serviceDesc, srv)
}

func _Rolo_Authorize_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Attributes)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RoloServer).Authorize(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Rolo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Rolo",
	HandlerType: (*RoloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _Rolo_Authorize_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
